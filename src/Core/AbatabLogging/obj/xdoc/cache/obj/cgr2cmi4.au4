id: AbatabLogging
language: CSharp
name:
  Default: AbatabLogging
qualifiedName:
  Default: AbatabLogging
type: Assembly
modifiers: {}
items:
- id: AbatabLogging
  commentId: N:AbatabLogging
  language: CSharp
  name:
    CSharp: AbatabLogging
    VB: AbatabLogging
  nameWithType:
    CSharp: AbatabLogging
    VB: AbatabLogging
  qualifiedName:
    CSharp: AbatabLogging
    VB: AbatabLogging
  type: Namespace
  assemblies:
  - AbatabLogging
  modifiers: {}
  items:
  - id: AbatabLogging.BuildContent
    commentId: T:AbatabLogging.BuildContent
    language: CSharp
    name:
      CSharp: BuildContent
      VB: BuildContent
    nameWithType:
      CSharp: BuildContent
      VB: BuildContent
    qualifiedName:
      CSharp: AbatabLogging.BuildContent
      VB: AbatabLogging.BuildContent
    type: Class
    assemblies:
    - AbatabLogging
    namespace: AbatabLogging
    source:
      id: BuildContent
      path: C:\IT\GitHub\SHS\Abatab\src\Core\AbatabLogging\BuildContent.cs
      startLine: 27
    summary: "\nLogic for building log file content.\n"
    example: []
    syntax:
      content:
        CSharp: public static class BuildContent
        VB: Public Module BuildContent
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: AbatabLogging.BuildContent.LogComponents(System.String,AbatabData.Session,System.String,System.String,System.String,System.String,System.Int32)
      commentId: M:AbatabLogging.BuildContent.LogComponents(System.String,AbatabData.Session,System.String,System.String,System.String,System.String,System.Int32)
      language: CSharp
      name:
        CSharp: LogComponents(String, Session, String, String, String, String, Int32)
        VB: LogComponents(String, Session, String, String, String, String, Int32)
      nameWithType:
        CSharp: BuildContent.LogComponents(String, Session, String, String, String, String, Int32)
        VB: BuildContent.LogComponents(String, Session, String, String, String, String, Int32)
      qualifiedName:
        CSharp: AbatabLogging.BuildContent.LogComponents(System.String, AbatabData.Session, System.String, System.String, System.String, System.String, System.Int32)
        VB: AbatabLogging.BuildContent.LogComponents(System.String, AbatabData.Session, System.String, System.String, System.String, System.String, System.Int32)
      type: Method
      assemblies:
      - AbatabLogging
      namespace: AbatabLogging
      source:
        id: LogComponents
        path: C:\IT\GitHub\SHS\Abatab\src\Core\AbatabLogging\BuildContent.cs
        startLine: 40
      summary: "\nBuilds the content for a log file.\n"
      example: []
      syntax:
        content:
          CSharp: public static string LogComponents(string eventType, Session abatabSession, string logMsg, string exeAssembly = "", string callPath = "", string callMember = "", int callLine = 0)
          VB: Public Shared Function LogComponents(eventType As String, abatabSession As Session, logMsg As String, exeAssembly As String = "", callPath As String = "", callMember As String = "", callLine As Integer = 0) As String
        parameters:
        - id: eventType
          type: System.String
          description: The type of log to create.
        - id: abatabSession
          type: AbatabData.Session
          description: Information/data for this session of Abatab.
        - id: logMsg
          type: System.String
          description: The log message.
        - id: exeAssembly
          type: System.String
          description: The name of executing assembly.
        - id: callPath
          type: System.String
          description: The filename of where the log is coming from.
        - id: callMember
          type: System.String
          description: The method name of where the log is coming from.
        - id: callLine
          type: System.Int32
          description: The file line of where the log is coming from.
        return:
          type: System.String
          description: The completed content for a log file.
      overload: AbatabLogging.BuildContent.LogComponents*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AbatabLogging.BuildContent.DebugComponents(System.String,System.String,System.String,System.String,System.String,System.Int32)
      commentId: M:AbatabLogging.BuildContent.DebugComponents(System.String,System.String,System.String,System.String,System.String,System.Int32)
      language: CSharp
      name:
        CSharp: DebugComponents(String, String, String, String, String, Int32)
        VB: DebugComponents(String, String, String, String, String, Int32)
      nameWithType:
        CSharp: BuildContent.DebugComponents(String, String, String, String, String, Int32)
        VB: BuildContent.DebugComponents(String, String, String, String, String, Int32)
      qualifiedName:
        CSharp: AbatabLogging.BuildContent.DebugComponents(System.String, System.String, System.String, System.String, System.String, System.Int32)
        VB: AbatabLogging.BuildContent.DebugComponents(System.String, System.String, System.String, System.String, System.String, System.Int32)
      type: Method
      assemblies:
      - AbatabLogging
      namespace: AbatabLogging
      source:
        id: DebugComponents
        path: C:\IT\GitHub\SHS\Abatab\src\Core\AbatabLogging\BuildContent.cs
        startLine: 72
      summary: "\nBuilds the content for a debug log file.\n"
      example: []
      syntax:
        content:
          CSharp: public static string DebugComponents(string exeAssembly, string debugMode, string debugMsg, string callPath, string callMember, int callLine)
          VB: Public Shared Function DebugComponents(exeAssembly As String, debugMode As String, debugMsg As String, callPath As String, callMember As String, callLine As Integer) As String
        parameters:
        - id: exeAssembly
          type: System.String
          description: The name of executing assembly.
        - id: debugMode
          type: System.String
          description: The Abatab debug mode setting.
        - id: debugMsg
          type: System.String
          description: The debug log message.
        - id: callPath
          type: System.String
          description: The filename of where the log is coming from.
        - id: callMember
          type: System.String
          description: The method name of where the log is coming from.
        - id: callLine
          type: System.Int32
          description: The file line of where the log is coming from.
        return:
          type: System.String
          description: The completed content for a debug log file.
      overload: AbatabLogging.BuildContent.DebugComponents*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: AbatabLogging.BuildPath
    commentId: T:AbatabLogging.BuildPath
    language: CSharp
    name:
      CSharp: BuildPath
      VB: BuildPath
    nameWithType:
      CSharp: BuildPath
      VB: BuildPath
    qualifiedName:
      CSharp: AbatabLogging.BuildPath
      VB: AbatabLogging.BuildPath
    type: Class
    assemblies:
    - AbatabLogging
    namespace: AbatabLogging
    source:
      id: BuildPath
      path: C:\IT\GitHub\SHS\Abatab\src\Core\AbatabLogging\BuildPath.cs
      startLine: 25
    summary: "\nLogic for building log file paths.\n"
    example: []
    syntax:
      content:
        CSharp: public static class BuildPath
        VB: Public Module BuildPath
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: AbatabLogging.BuildPath.WithCaller(System.String,System.String,System.String,System.String,System.String,System.Int32)
      commentId: M:AbatabLogging.BuildPath.WithCaller(System.String,System.String,System.String,System.String,System.String,System.Int32)
      language: CSharp
      name:
        CSharp: WithCaller(String, String, String, String, String, Int32)
        VB: WithCaller(String, String, String, String, String, Int32)
      nameWithType:
        CSharp: BuildPath.WithCaller(String, String, String, String, String, Int32)
        VB: BuildPath.WithCaller(String, String, String, String, String, Int32)
      qualifiedName:
        CSharp: AbatabLogging.BuildPath.WithCaller(System.String, System.String, System.String, System.String, System.String, System.Int32)
        VB: AbatabLogging.BuildPath.WithCaller(System.String, System.String, System.String, System.String, System.String, System.Int32)
      type: Method
      assemblies:
      - AbatabLogging
      namespace: AbatabLogging
      source:
        id: WithCaller
        path: C:\IT\GitHub\SHS\Abatab\src\Core\AbatabLogging\BuildPath.cs
        startLine: 37
      summary: "\nBuilds a log file path with caller information.\n"
      example: []
      syntax:
        content:
          CSharp: public static string WithCaller(string eventType, string logRoot, string exeAssembly = "", string callPath = "", string callMember = "", int callLine = 0)
          VB: Public Shared Function WithCaller(eventType As String, logRoot As String, exeAssembly As String = "", callPath As String = "", callMember As String = "", callLine As Integer = 0) As String
        parameters:
        - id: eventType
          type: System.String
          description: The type of log to create.
        - id: logRoot
          type: System.String
          description: The session root directory.
        - id: exeAssembly
          type: System.String
          description: The name of executing assembly.
        - id: callPath
          type: System.String
          description: The filename of where the log is coming from.
        - id: callMember
          type: System.String
          description: The method name of where the log is coming from.
        - id: callLine
          type: System.Int32
          description: The file line of where the log is coming from.
        return:
          type: System.String
          description: A completed log file path with caller information.
      overload: AbatabLogging.BuildPath.WithCaller*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AbatabLogging.BuildPath.Timestamped(System.String,System.String)
      commentId: M:AbatabLogging.BuildPath.Timestamped(System.String,System.String)
      language: CSharp
      name:
        CSharp: Timestamped(String, String)
        VB: Timestamped(String, String)
      nameWithType:
        CSharp: BuildPath.Timestamped(String, String)
        VB: BuildPath.Timestamped(String, String)
      qualifiedName:
        CSharp: AbatabLogging.BuildPath.Timestamped(System.String, System.String)
        VB: AbatabLogging.BuildPath.Timestamped(System.String, System.String)
      type: Method
      assemblies:
      - AbatabLogging
      namespace: AbatabLogging
      source:
        id: Timestamped
        path: C:\IT\GitHub\SHS\Abatab\src\Core\AbatabLogging\BuildPath.cs
        startLine: 65
      summary: "\nBuilds a timestamped log file path.\n"
      example: []
      syntax:
        content:
          CSharp: public static string Timestamped(string eventType, string logRoot)
          VB: Public Shared Function Timestamped(eventType As String, logRoot As String) As String
        parameters:
        - id: eventType
          type: System.String
          description: The type of log to create.
        - id: logRoot
          type: System.String
          description: The session root directory.
        return:
          type: System.String
          description: A completed log file path with a timestamp.
      overload: AbatabLogging.BuildPath.Timestamped*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AbatabLogging.BuildPath.MessageName(System.String,System.String,System.String)
      commentId: M:AbatabLogging.BuildPath.MessageName(System.String,System.String,System.String)
      language: CSharp
      name:
        CSharp: MessageName(String, String, String)
        VB: MessageName(String, String, String)
      nameWithType:
        CSharp: BuildPath.MessageName(String, String, String)
        VB: BuildPath.MessageName(String, String, String)
      qualifiedName:
        CSharp: AbatabLogging.BuildPath.MessageName(System.String, System.String, System.String)
        VB: AbatabLogging.BuildPath.MessageName(System.String, System.String, System.String)
      type: Method
      assemblies:
      - AbatabLogging
      namespace: AbatabLogging
      source:
        id: MessageName
        path: C:\IT\GitHub\SHS\Abatab\src\Core\AbatabLogging\BuildPath.cs
        startLine: 99
      summary: "\nBuilds a log file path with the log message in the name.\n"
      example: []
      syntax:
        content:
          CSharp: public static string MessageName(string eventType, string logRoot, string logMsg)
          VB: Public Shared Function MessageName(eventType As String, logRoot As String, logMsg As String) As String
        parameters:
        - id: eventType
          type: System.String
          description: The type of log to create.
        - id: logRoot
          type: System.String
          description: The session root directory.
        - id: logMsg
          type: System.String
          description: The log message.
        return:
          type: System.String
          description: A log file path with the log message in the name.
      overload: AbatabLogging.BuildPath.MessageName*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: AbatabLogging.CommentExamples
    commentId: T:AbatabLogging.CommentExamples
    language: CSharp
    name:
      CSharp: CommentExamples
      VB: CommentExamples
    nameWithType:
      CSharp: CommentExamples
      VB: CommentExamples
    qualifiedName:
      CSharp: AbatabLogging.CommentExamples
      VB: AbatabLogging.CommentExamples
    type: Class
    assemblies:
    - AbatabLogging
    namespace: AbatabLogging
    source:
      id: CommentExamples
      path: C:\IT\GitHub\SHS\Abatab\src\Core\AbatabLogging\CommentExamples.cs
      startLine: 9
    summary: "\nsdfasdfadsf\n"
    example: []
    syntax:
      content:
        CSharp: public static class CommentExamples
        VB: Public Module CommentExamples
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items: []
  - id: AbatabLogging.CommentExamples.ExampleClass
    commentId: T:AbatabLogging.CommentExamples.ExampleClass
    language: CSharp
    name:
      CSharp: CommentExamples.ExampleClass
      VB: CommentExamples.ExampleClass
    nameWithType:
      CSharp: CommentExamples.ExampleClass
      VB: CommentExamples.ExampleClass
    qualifiedName:
      CSharp: AbatabLogging.CommentExamples.ExampleClass
      VB: AbatabLogging.CommentExamples.ExampleClass
    type: Class
    assemblies:
    - AbatabLogging
    namespace: AbatabLogging
    source:
      id: ExampleClass
      path: C:\IT\GitHub\SHS\Abatab\src\Core\AbatabLogging\CommentExamples.cs
      startLine: 88
    summary: "\nEvery class and member should have a one sentence\nsummary describing its purpose.\n"
    remarks: "\nYou can expand on that one sentence summary to provide more information for readers. In this case, the <code>ExampleClass</code> provides different C# elements to show\nhow you would add documentation comments for most elements in a typical class.\n<p>\nThe remarks can add multiple paragraphs, so you can write detailed information for developers that use\nyour work. You should add everything needed for\nreaders to be successful. This class contains\nexamples for the following:\n</p>\n<table><tbody><tr><td>Summary</td><td>\nThis should provide a one sentence summary of the class or member.\n</td></tr><tr><td>Remarks</td><td>\nThis is typically a more detailed description of the class or member\n</td></tr><tr><td>para</td><td>\nThe para tag separates a section into multiple paragraphs\n</td></tr><tr><td>list</td><td>\nProvides a list of terms or elements\n</td></tr><tr><td>returns, param</td><td>\nUsed to describe parameters and return values\n</td></tr><tr><td>value</td><td>Used to describe properties</td></tr><tr><td>exception</td><td>\nUsed to describe exceptions that may be thrown\n</td></tr><tr><td>c, cref, see, seealso</td><td>\nThese provide code style and links to other\ndocumentation elements\n</td></tr><tr><td>example, code</td><td>\nThese are used for code examples\n</td></tr></tbody></table>\n<p>\nThe list above uses the &quot;table&quot; style. You could\nalso use the &quot;bullet&quot; or &quot;number&quot; style. Neither\nwould typically use the &quot;term&quot; element.\n<br />\nNote: paragraphs are double spaced. Use the *br*\ntag for single spaced lines.\n</p>\n"
    example: []
    syntax:
      content:
        CSharp: public static class ExampleClass
        VB: Public Module ExampleClass
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: AbatabLogging.CommentExamples.ExampleClass.Label
      commentId: P:AbatabLogging.CommentExamples.ExampleClass.Label
      language: CSharp
      name:
        CSharp: Label
        VB: Label
      nameWithType:
        CSharp: CommentExamples.ExampleClass.Label
        VB: CommentExamples.ExampleClass.Label
      qualifiedName:
        CSharp: AbatabLogging.CommentExamples.ExampleClass.Label
        VB: AbatabLogging.CommentExamples.ExampleClass.Label
      type: Property
      assemblies:
      - AbatabLogging
      namespace: AbatabLogging
      source:
        id: Label
        path: C:\IT\GitHub\SHS\Abatab\src\Core\AbatabLogging\CommentExamples.cs
        startLine: 102
      remarks: "\nThe <xref href=\"AbatabLogging.CommentExamples.ExampleClass.Label\" data-throw-if-not-resolved=\"false\"></xref> is a <xref uid=\"langword_csharp_string\" name=\"string\" href=\"\"></xref>\nthat you use for a label.\n<p>\nNote that there isn&apos;t a way to provide a &quot;cref&quot; to\neach accessor, only to the property itself.\n</p>\n"
      example: []
      syntax:
        content:
          CSharp: public static string Label { get; set; }
          VB: Public Shared Property Label As String
        parameters: []
        return:
          type: System.String
          description: "\nThe <code>Label</code> property represents a label\nfor this instance.\n"
      overload: AbatabLogging.CommentExamples.ExampleClass.Label*
      modifiers:
        CSharp:
        - public
        - static
        - get
        - set
        VB:
        - Public
        - Shared
      references:
        AbatabLogging.CommentExamples.ExampleClass.Label: 
    - id: AbatabLogging.CommentExamples.ExampleClass.Add(System.Int32,System.Int32)
      commentId: M:AbatabLogging.CommentExamples.ExampleClass.Add(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: Add(Int32, Int32)
        VB: Add(Int32, Int32)
      nameWithType:
        CSharp: CommentExamples.ExampleClass.Add(Int32, Int32)
        VB: CommentExamples.ExampleClass.Add(Int32, Int32)
      qualifiedName:
        CSharp: AbatabLogging.CommentExamples.ExampleClass.Add(System.Int32, System.Int32)
        VB: AbatabLogging.CommentExamples.ExampleClass.Add(System.Int32, System.Int32)
      type: Method
      assemblies:
      - AbatabLogging
      namespace: AbatabLogging
      source:
        id: Add
        path: C:\IT\GitHub\SHS\Abatab\src\Core\AbatabLogging\CommentExamples.cs
        startLine: 140
      summary: "\nAdds two integers and returns the result.\n"
      example:
      - "\n<pre><code>int c = Math.Add(4, 5);\nif (c > 10)\n{\n    Console.WriteLine(c);\n}</code></pre>\n"
      syntax:
        content:
          CSharp: public static int Add(int left, int right)
          VB: Public Shared Function Add(left As Integer, right As Integer) As Integer
        parameters:
        - id: left
          type: System.Int32
          description: "\nThe left operand of the addition.\n"
        - id: right
          type: System.Int32
          description: "\nThe right operand of the addition.\n"
        return:
          type: System.Int32
          description: "\nThe sum of two integers.\n"
      overload: AbatabLogging.CommentExamples.ExampleClass.Add*
      exceptions:
      - type: System.OverflowException
        commentId: T:System.OverflowException
        description: "\nThrown when one parameter is\n<xref href=\"System.Int32.MaxValue?text=MaxValue\" data-throw-if-not-resolved=\"false\"></xref> and the other is\ngreater than 0.\nNote that here you can also use\n<a href=\"https://docs.microsoft.com/dotnet/api/system.int32.maxvalue\">https://docs.microsoft.com/dotnet/api/system.int32.maxvalue</a>\n to point a web page instead.\n"
      see:
      - linkId: AbatabLogging.CommentExamples.ExampleClass
        commentId: T:AbatabLogging.CommentExamples.ExampleClass
      seealso:
      - linkId: AbatabLogging.CommentExamples.ExampleClass.Label
        commentId: P:AbatabLogging.CommentExamples.ExampleClass.Label
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        System.Int32.MaxValue: 
        AbatabLogging.CommentExamples.ExampleClass: 
        AbatabLogging.CommentExamples.ExampleClass.Label: 
        System.OverflowException: 
    - id: AbatabLogging.CommentExamples.ExampleClass.gsgsg(System.String,System.String)
      commentId: M:AbatabLogging.CommentExamples.ExampleClass.gsgsg(System.String,System.String)
      language: CSharp
      name:
        CSharp: gsgsg(String, String)
        VB: gsgsg(String, String)
      nameWithType:
        CSharp: CommentExamples.ExampleClass.gsgsg(String, String)
        VB: CommentExamples.ExampleClass.gsgsg(String, String)
      qualifiedName:
        CSharp: AbatabLogging.CommentExamples.ExampleClass.gsgsg(System.String, System.String)
        VB: AbatabLogging.CommentExamples.ExampleClass.gsgsg(System.String, System.String)
      type: Method
      assemblies:
      - AbatabLogging
      namespace: AbatabLogging
      source:
        id: gsgsg
        path: C:\IT\GitHub\SHS\Abatab\src\Core\AbatabLogging\CommentExamples.cs
        startLine: 166
      summary: "\nThis is an example of a positional record.\n"
      remarks: "\nThere isn&apos;t a way to add XML comments for properties\ncreated for positional records, yet. The language\ndesign team is still considering what tags should\nbe supported, and where. Currently, you can use\nthe &quot;param&quot; tag to describe the parameters to the\nprimary constructor.\n"
      example: []
      syntax:
        content:
          CSharp: public static void gsgsg(string FirstName, string LastName)
          VB: Public Shared Sub gsgsg(FirstName As String, LastName As String)
        parameters:
        - id: FirstName
          type: System.String
          description: "\nThis tag will apply to the primary constructor parameter.\n"
        - id: LastName
          type: System.String
          description: "\nThis tag will apply to the primary constructor parameter.\n"
      overload: AbatabLogging.CommentExamples.ExampleClass.gsgsg*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: AbatabLogging.Debuggler
    commentId: T:AbatabLogging.Debuggler
    language: CSharp
    name:
      CSharp: Debuggler
      VB: Debuggler
    nameWithType:
      CSharp: Debuggler
      VB: Debuggler
    qualifiedName:
      CSharp: AbatabLogging.Debuggler
      VB: AbatabLogging.Debuggler
    type: Class
    assemblies:
    - AbatabLogging
    namespace: AbatabLogging
    source:
      id: Debuggler
      path: C:\IT\GitHub\SHS\Abatab\src\Core\AbatabLogging\Debuggler.cs
      startLine: 45
    summary: "\nLogic for debugging functionality.\n"
    example: []
    syntax:
      content:
        CSharp: public static class Debuggler
        VB: Public Module Debuggler
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: AbatabLogging.Debuggler.DebugTheDebugger(System.Boolean,System.String,System.String)
      commentId: M:AbatabLogging.Debuggler.DebugTheDebugger(System.Boolean,System.String,System.String)
      language: CSharp
      name:
        CSharp: DebugTheDebugger(Boolean, String, String)
        VB: DebugTheDebugger(Boolean, String, String)
      nameWithType:
        CSharp: Debuggler.DebugTheDebugger(Boolean, String, String)
        VB: Debuggler.DebugTheDebugger(Boolean, String, String)
      qualifiedName:
        CSharp: AbatabLogging.Debuggler.DebugTheDebugger(System.Boolean, System.String, System.String)
        VB: AbatabLogging.Debuggler.DebugTheDebugger(System.Boolean, System.String, System.String)
      type: Method
      assemblies:
      - AbatabLogging
      namespace: AbatabLogging
      source:
        id: DebugTheDebugger
        path: C:\IT\GitHub\SHS\Abatab\src\Core\AbatabLogging\Debuggler.cs
        startLine: 51
      summary: Debugs the debugger.
      example: []
      syntax:
        content:
          CSharp: public static void DebugTheDebugger(bool debugDebugger, string debugLogRoot, string debugMsg)
          VB: Public Shared Sub DebugTheDebugger(debugDebugger As Boolean, debugLogRoot As String, debugMsg As String)
        parameters:
        - id: debugDebugger
          type: System.Boolean
          description: The flag that determines if the debugger should be debugged.
        - id: debugLogRoot
          type: System.String
          description: The debug log root directory.
        - id: debugMsg
          type: System.String
          description: The debugger log message.
      overload: AbatabLogging.Debuggler.DebugTheDebugger*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: AbatabLogging.LogEvent
    commentId: T:AbatabLogging.LogEvent
    language: CSharp
    name:
      CSharp: LogEvent
      VB: LogEvent
    nameWithType:
      CSharp: LogEvent
      VB: LogEvent
    qualifiedName:
      CSharp: AbatabLogging.LogEvent
      VB: AbatabLogging.LogEvent
    type: Class
    assemblies:
    - AbatabLogging
    namespace: AbatabLogging
    source:
      id: LogEvent
      path: C:\IT\GitHub\SHS\Abatab\src\Core\AbatabLogging\LogEvent.cs
      startLine: 27
    summary: "\nLogic for building log files for various events.\n"
    example: []
    syntax:
      content:
        CSharp: public static class LogEvent
        VB: Public Module LogEvent
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: AbatabLogging.LogEvent.Access(AbatabData.Session,System.String)
      commentId: M:AbatabLogging.LogEvent.Access(AbatabData.Session,System.String)
      language: CSharp
      name:
        CSharp: Access(Session, String)
        VB: Access(Session, String)
      nameWithType:
        CSharp: LogEvent.Access(Session, String)
        VB: LogEvent.Access(Session, String)
      qualifiedName:
        CSharp: AbatabLogging.LogEvent.Access(AbatabData.Session, System.String)
        VB: AbatabLogging.LogEvent.Access(AbatabData.Session, System.String)
      type: Method
      assemblies:
      - AbatabLogging
      namespace: AbatabLogging
      source:
        id: Access
        path: C:\IT\GitHub\SHS\Abatab\src\Core\AbatabLogging\LogEvent.cs
        startLine: 34
      summary: "\nLog a user access event.\n"
      example: []
      syntax:
        content:
          CSharp: public static void Access(Session abatabSession, string accessMsg)
          VB: Public Shared Sub Access(abatabSession As Session, accessMsg As String)
        parameters:
        - id: abatabSession
          type: AbatabData.Session
          description: Information/data for this session of Abatab.
        - id: accessMsg
          type: System.String
          description: The access log message.
      overload: AbatabLogging.LogEvent.Access*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AbatabLogging.LogEvent.Debug(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)
      commentId: M:AbatabLogging.LogEvent.Debug(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)
      language: CSharp
      name:
        CSharp: Debug(String, String, String, String, String, String, Int32)
        VB: Debug(String, String, String, String, String, String, Int32)
      nameWithType:
        CSharp: LogEvent.Debug(String, String, String, String, String, String, Int32)
        VB: LogEvent.Debug(String, String, String, String, String, String, Int32)
      qualifiedName:
        CSharp: AbatabLogging.LogEvent.Debug(System.String, System.String, System.String, System.String, System.String, System.String, System.Int32)
        VB: AbatabLogging.LogEvent.Debug(System.String, System.String, System.String, System.String, System.String, System.String, System.Int32)
      type: Method
      assemblies:
      - AbatabLogging
      namespace: AbatabLogging
      source:
        id: Debug
        path: C:\IT\GitHub\SHS\Abatab\src\Core\AbatabLogging\LogEvent.cs
        startLine: 62
      summary: "\nBuilds a debug log file.\n"
      example: []
      syntax:
        content:
          CSharp: public static void Debug(string exeAssembly, string debugMode, string debugLogRoot = "", string debugMsg = "", string callPath = "", string callMember = "", int callLine = 0)
          VB: Public Shared Sub Debug(exeAssembly As String, debugMode As String, debugLogRoot As String = "", debugMsg As String = "", callPath As String = "", callMember As String = "", callLine As Integer = 0)
        parameters:
        - id: exeAssembly
          type: System.String
          description: The name of executing assembly.
        - id: debugMode
          type: System.String
          description: The Abatab debug mode.
        - id: debugLogRoot
          type: System.String
          description: The debug log root directory.
        - id: debugMsg
          type: System.String
          description: The debug log message.
        - id: callPath
          type: System.String
          description: The filename of where the log is coming from.
        - id: callMember
          type: System.String
          description: The method name of where the log is coming from.
        - id: callLine
          type: System.Int32
          description: The file line of where the log is coming from.
      overload: AbatabLogging.LogEvent.Debug*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AbatabLogging.LogEvent.ModQuickMedOrder(AbatabData.Session,System.String)
      commentId: M:AbatabLogging.LogEvent.ModQuickMedOrder(AbatabData.Session,System.String)
      language: CSharp
      name:
        CSharp: ModQuickMedOrder(Session, String)
        VB: ModQuickMedOrder(Session, String)
      nameWithType:
        CSharp: LogEvent.ModQuickMedOrder(Session, String)
        VB: LogEvent.ModQuickMedOrder(Session, String)
      qualifiedName:
        CSharp: AbatabLogging.LogEvent.ModQuickMedOrder(AbatabData.Session, System.String)
        VB: AbatabLogging.LogEvent.ModQuickMedOrder(AbatabData.Session, System.String)
      type: Method
      assemblies:
      - AbatabLogging
      namespace: AbatabLogging
      source:
        id: ModQuickMedOrder
        path: C:\IT\GitHub\SHS\Abatab\src\Core\AbatabLogging\LogEvent.cs
        startLine: 90
      summary: "\nBuilds detailed information for the QuickMedOrder module.\n"
      example: []
      syntax:
        content:
          CSharp: public static void ModQuickMedOrder(Session abatabSession, string logMsg = "QuickMedOrder detail log.")
          VB: Public Shared Sub ModQuickMedOrder(abatabSession As Session, logMsg As String = "QuickMedOrder detail log.")
        parameters:
        - id: abatabSession
          type: AbatabData.Session
          description: Information/data for this session of Abatab.
        - id: logMsg
          type: System.String
          description: The log message.
      overload: AbatabLogging.LogEvent.ModQuickMedOrder*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AbatabLogging.LogEvent.PrimevalDebug(System.String,System.String,System.String,System.String,System.Int32)
      commentId: M:AbatabLogging.LogEvent.PrimevalDebug(System.String,System.String,System.String,System.String,System.Int32)
      language: CSharp
      name:
        CSharp: PrimevalDebug(String, String, String, String, Int32)
        VB: PrimevalDebug(String, String, String, String, Int32)
      nameWithType:
        CSharp: LogEvent.PrimevalDebug(String, String, String, String, Int32)
        VB: LogEvent.PrimevalDebug(String, String, String, String, Int32)
      qualifiedName:
        CSharp: AbatabLogging.LogEvent.PrimevalDebug(System.String, System.String, System.String, System.String, System.Int32)
        VB: AbatabLogging.LogEvent.PrimevalDebug(System.String, System.String, System.String, System.String, System.Int32)
      type: Method
      assemblies:
      - AbatabLogging
      namespace: AbatabLogging
      source:
        id: PrimevalDebug
        path: C:\IT\GitHub\SHS\Abatab\src\Core\AbatabLogging\LogEvent.cs
        startLine: 116
      summary: "\nBuilds a debug log file.\n"
      example: []
      syntax:
        content:
          CSharp: public static void PrimevalDebug(string debugMode, string exeAssembly, string callPath = "", string callMember = "", int callLine = 0)
          VB: Public Shared Sub PrimevalDebug(debugMode As String, exeAssembly As String, callPath As String = "", callMember As String = "", callLine As Integer = 0)
        parameters:
        - id: debugMode
          type: System.String
          description: The Abatab debug mode.
        - id: exeAssembly
          type: System.String
          description: The name of executing assembly.
        - id: callPath
          type: System.String
          description: The filename of where the log is coming from.
        - id: callMember
          type: System.String
          description: The method name of where the log is coming from.
        - id: callLine
          type: System.Int32
          description: The file line of where the log is coming from.
      overload: AbatabLogging.LogEvent.PrimevalDebug*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AbatabLogging.LogEvent.Session(AbatabData.Session,System.String)
      commentId: M:AbatabLogging.LogEvent.Session(AbatabData.Session,System.String)
      language: CSharp
      name:
        CSharp: Session(Session, String)
        VB: Session(Session, String)
      nameWithType:
        CSharp: LogEvent.Session(Session, String)
        VB: LogEvent.Session(Session, String)
      qualifiedName:
        CSharp: AbatabLogging.LogEvent.Session(AbatabData.Session, System.String)
        VB: AbatabLogging.LogEvent.Session(AbatabData.Session, System.String)
      type: Method
      assemblies:
      - AbatabLogging
      namespace: AbatabLogging
      source:
        id: Session
        path: C:\IT\GitHub\SHS\Abatab\src\Core\AbatabLogging\LogEvent.cs
        startLine: 135
      summary: "\nBuilds a session detail log.\n"
      example: []
      syntax:
        content:
          CSharp: public static void Session(Session abatabSession, string logMsg = "Session detail log.")
          VB: Public Shared Sub Session(abatabSession As Session, logMsg As String = "Session detail log.")
        parameters:
        - id: abatabSession
          type: AbatabData.Session
          description: Information/data for this session of Abatab.
        - id: logMsg
          type: System.String
          description: The log message.
      overload: AbatabLogging.LogEvent.Session*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AbatabLogging.LogEvent.Trace(AbatabData.Session,System.String,System.String,System.String,System.String,System.Int32)
      commentId: M:AbatabLogging.LogEvent.Trace(AbatabData.Session,System.String,System.String,System.String,System.String,System.Int32)
      language: CSharp
      name:
        CSharp: Trace(Session, String, String, String, String, Int32)
        VB: Trace(Session, String, String, String, String, Int32)
      nameWithType:
        CSharp: LogEvent.Trace(Session, String, String, String, String, Int32)
        VB: LogEvent.Trace(Session, String, String, String, String, Int32)
      qualifiedName:
        CSharp: AbatabLogging.LogEvent.Trace(AbatabData.Session, System.String, System.String, System.String, System.String, System.Int32)
        VB: AbatabLogging.LogEvent.Trace(AbatabData.Session, System.String, System.String, System.String, System.String, System.Int32)
      type: Method
      assemblies:
      - AbatabLogging
      namespace: AbatabLogging
      source:
        id: Trace
        path: C:\IT\GitHub\SHS\Abatab\src\Core\AbatabLogging\LogEvent.cs
        startLine: 162
      syntax:
        content:
          CSharp: public static void Trace(Session abatabSession, string exeAssembly, string logMsg = "Trace log start...", string callPath = "", string callMember = "", int callLine = 0)
          VB: Public Shared Sub Trace(abatabSession As Session, exeAssembly As String, logMsg As String = "Trace log start...", callPath As String = "", callMember As String = "", callLine As Integer = 0)
        parameters:
        - id: abatabSession
          type: AbatabData.Session
        - id: exeAssembly
          type: System.String
        - id: logMsg
          type: System.String
        - id: callPath
          type: System.String
        - id: callMember
          type: System.String
        - id: callLine
          type: System.Int32
      overload: AbatabLogging.LogEvent.Trace*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AbatabLogging.LogEvent.WebConfigDebug(System.Collections.Generic.Dictionary{System.String,System.String})
      commentId: M:AbatabLogging.LogEvent.WebConfigDebug(System.Collections.Generic.Dictionary{System.String,System.String})
      language: CSharp
      name:
        CSharp: WebConfigDebug(Dictionary<String, String>)
        VB: WebConfigDebug(Dictionary(Of String, String))
      nameWithType:
        CSharp: LogEvent.WebConfigDebug(Dictionary<String, String>)
        VB: LogEvent.WebConfigDebug(Dictionary(Of String, String))
      qualifiedName:
        CSharp: AbatabLogging.LogEvent.WebConfigDebug(System.Collections.Generic.Dictionary<System.String, System.String>)
        VB: AbatabLogging.LogEvent.WebConfigDebug(System.Collections.Generic.Dictionary(Of System.String, System.String))
      type: Method
      assemblies:
      - AbatabLogging
      namespace: AbatabLogging
      source:
        id: WebConfigDebug
        path: C:\IT\GitHub\SHS\Abatab\src\Core\AbatabLogging\LogEvent.cs
        startLine: 181
      summary: "\nBuild a webConfig debug log.\n"
      example: []
      syntax:
        content:
          CSharp: public static void WebConfigDebug(Dictionary<string, string> webConfig)
          VB: Public Shared Sub WebConfigDebug(webConfig As Dictionary(Of String, String))
        parameters:
        - id: webConfig
          type: System.Collections.Generic.Dictionary{System.String,System.String}
          description: The contents of Web.config.
      overload: AbatabLogging.LogEvent.WebConfigDebug*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: AbatabLogging.WriteLogFile
    commentId: T:AbatabLogging.WriteLogFile
    language: CSharp
    name:
      CSharp: WriteLogFile
      VB: WriteLogFile
    nameWithType:
      CSharp: WriteLogFile
      VB: WriteLogFile
    qualifiedName:
      CSharp: AbatabLogging.WriteLogFile
      VB: AbatabLogging.WriteLogFile
    type: Class
    assemblies:
    - AbatabLogging
    namespace: AbatabLogging
    source:
      id: WriteLogFile
      path: C:\IT\GitHub\SHS\Abatab\src\Core\AbatabLogging\WriteLogFile.cs
      startLine: 24
    summary: "\nLogic for writing log files.\n"
    example: []
    syntax:
      content:
        CSharp: public static class WriteLogFile
        VB: Public Module WriteLogFile
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: AbatabLogging.WriteLogFile.LocalFile(System.String,System.String,System.Int32)
      commentId: M:AbatabLogging.WriteLogFile.LocalFile(System.String,System.String,System.Int32)
      language: CSharp
      name:
        CSharp: LocalFile(String, String, Int32)
        VB: LocalFile(String, String, Int32)
      nameWithType:
        CSharp: WriteLogFile.LocalFile(String, String, Int32)
        VB: WriteLogFile.LocalFile(String, String, Int32)
      qualifiedName:
        CSharp: AbatabLogging.WriteLogFile.LocalFile(System.String, System.String, System.Int32)
        VB: AbatabLogging.WriteLogFile.LocalFile(System.String, System.String, System.Int32)
      type: Method
      assemblies:
      - AbatabLogging
      namespace: AbatabLogging
      source:
        id: LocalFile
        path: C:\IT\GitHub\SHS\Abatab\src\Core\AbatabLogging\WriteLogFile.cs
        startLine: 30
      summary: Writes a log file.
      example: []
      syntax:
        content:
          CSharp: public static void LocalFile(string logPath, string logContent, int loggingDelay)
          VB: Public Shared Sub LocalFile(logPath As String, logContent As String, loggingDelay As Integer)
        parameters:
        - id: logPath
          type: System.String
          description: The log file path.
        - id: logContent
          type: System.String
          description: The log file content.
        - id: loggingDelay
          type: System.Int32
          description: The delay between writing log files.
      overload: AbatabLogging.WriteLogFile.LocalFile*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
references:
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  System.Object.Equals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object,System.Object)
  System.Object.ReferenceEquals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  System.Object.GetType:
    name:
      CSharp:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetType
  System.Object.MemberwiseClone:
    name:
      CSharp:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.MemberwiseClone
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  AbatabData:
    name:
      CSharp:
      - name: AbatabData
        nameWithType: AbatabData
        qualifiedName: AbatabData
      VB:
      - name: AbatabData
        nameWithType: AbatabData
        qualifiedName: AbatabData
    isDefinition: true
    commentId: N:AbatabData
  AbatabData.Session:
    name:
      CSharp:
      - id: AbatabData.Session
        name: Session
        nameWithType: Session
        qualifiedName: AbatabData.Session
      VB:
      - id: AbatabData.Session
        name: Session
        nameWithType: Session
        qualifiedName: AbatabData.Session
    isDefinition: true
    parent: AbatabData
    commentId: T:AbatabData.Session
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  AbatabLogging.BuildContent.LogComponents*:
    name:
      CSharp:
      - id: AbatabLogging.BuildContent.LogComponents*
        name: LogComponents
        nameWithType: BuildContent.LogComponents
        qualifiedName: AbatabLogging.BuildContent.LogComponents
      VB:
      - id: AbatabLogging.BuildContent.LogComponents*
        name: LogComponents
        nameWithType: BuildContent.LogComponents
        qualifiedName: AbatabLogging.BuildContent.LogComponents
    isDefinition: true
    commentId: Overload:AbatabLogging.BuildContent.LogComponents
  AbatabLogging.BuildContent.DebugComponents*:
    name:
      CSharp:
      - id: AbatabLogging.BuildContent.DebugComponents*
        name: DebugComponents
        nameWithType: BuildContent.DebugComponents
        qualifiedName: AbatabLogging.BuildContent.DebugComponents
      VB:
      - id: AbatabLogging.BuildContent.DebugComponents*
        name: DebugComponents
        nameWithType: BuildContent.DebugComponents
        qualifiedName: AbatabLogging.BuildContent.DebugComponents
    isDefinition: true
    commentId: Overload:AbatabLogging.BuildContent.DebugComponents
  AbatabLogging.BuildContent:
    name:
      CSharp:
      - id: AbatabLogging.BuildContent
        name: BuildContent
        nameWithType: BuildContent
        qualifiedName: AbatabLogging.BuildContent
      VB:
      - id: AbatabLogging.BuildContent
        name: BuildContent
        nameWithType: BuildContent
        qualifiedName: AbatabLogging.BuildContent
    isDefinition: true
    commentId: T:AbatabLogging.BuildContent
  AbatabLogging.BuildPath.WithCaller*:
    name:
      CSharp:
      - id: AbatabLogging.BuildPath.WithCaller*
        name: WithCaller
        nameWithType: BuildPath.WithCaller
        qualifiedName: AbatabLogging.BuildPath.WithCaller
      VB:
      - id: AbatabLogging.BuildPath.WithCaller*
        name: WithCaller
        nameWithType: BuildPath.WithCaller
        qualifiedName: AbatabLogging.BuildPath.WithCaller
    isDefinition: true
    commentId: Overload:AbatabLogging.BuildPath.WithCaller
  AbatabLogging.BuildPath.Timestamped*:
    name:
      CSharp:
      - id: AbatabLogging.BuildPath.Timestamped*
        name: Timestamped
        nameWithType: BuildPath.Timestamped
        qualifiedName: AbatabLogging.BuildPath.Timestamped
      VB:
      - id: AbatabLogging.BuildPath.Timestamped*
        name: Timestamped
        nameWithType: BuildPath.Timestamped
        qualifiedName: AbatabLogging.BuildPath.Timestamped
    isDefinition: true
    commentId: Overload:AbatabLogging.BuildPath.Timestamped
  AbatabLogging.BuildPath.MessageName*:
    name:
      CSharp:
      - id: AbatabLogging.BuildPath.MessageName*
        name: MessageName
        nameWithType: BuildPath.MessageName
        qualifiedName: AbatabLogging.BuildPath.MessageName
      VB:
      - id: AbatabLogging.BuildPath.MessageName*
        name: MessageName
        nameWithType: BuildPath.MessageName
        qualifiedName: AbatabLogging.BuildPath.MessageName
    isDefinition: true
    commentId: Overload:AbatabLogging.BuildPath.MessageName
  AbatabLogging.BuildPath:
    name:
      CSharp:
      - id: AbatabLogging.BuildPath
        name: BuildPath
        nameWithType: BuildPath
        qualifiedName: AbatabLogging.BuildPath
      VB:
      - id: AbatabLogging.BuildPath
        name: BuildPath
        nameWithType: BuildPath
        qualifiedName: AbatabLogging.BuildPath
    isDefinition: true
    commentId: T:AbatabLogging.BuildPath
  AbatabLogging.CommentExamples:
    name:
      CSharp:
      - id: AbatabLogging.CommentExamples
        name: CommentExamples
        nameWithType: CommentExamples
        qualifiedName: AbatabLogging.CommentExamples
      VB:
      - id: AbatabLogging.CommentExamples
        name: CommentExamples
        nameWithType: CommentExamples
        qualifiedName: AbatabLogging.CommentExamples
    isDefinition: true
    commentId: T:AbatabLogging.CommentExamples
  AbatabLogging.CommentExamples.ExampleClass.Label:
    commentId: P:AbatabLogging.CommentExamples.ExampleClass.Label
  AbatabLogging.CommentExamples.ExampleClass.Label*:
    name:
      CSharp:
      - id: AbatabLogging.CommentExamples.ExampleClass.Label*
        name: Label
        nameWithType: CommentExamples.ExampleClass.Label
        qualifiedName: AbatabLogging.CommentExamples.ExampleClass.Label
      VB:
      - id: AbatabLogging.CommentExamples.ExampleClass.Label*
        name: Label
        nameWithType: CommentExamples.ExampleClass.Label
        qualifiedName: AbatabLogging.CommentExamples.ExampleClass.Label
    isDefinition: true
    commentId: Overload:AbatabLogging.CommentExamples.ExampleClass.Label
  System.Int32.MaxValue:
    commentId: F:System.Int32.MaxValue
  AbatabLogging.CommentExamples.ExampleClass:
    name:
      CSharp:
      - id: AbatabLogging.CommentExamples.ExampleClass
        name: CommentExamples.ExampleClass
        nameWithType: CommentExamples.ExampleClass
        qualifiedName: AbatabLogging.CommentExamples.ExampleClass
      VB:
      - id: AbatabLogging.CommentExamples.ExampleClass
        name: CommentExamples.ExampleClass
        nameWithType: CommentExamples.ExampleClass
        qualifiedName: AbatabLogging.CommentExamples.ExampleClass
    isDefinition: true
    commentId: T:AbatabLogging.CommentExamples.ExampleClass
  System.OverflowException:
    commentId: T:System.OverflowException
  AbatabLogging.CommentExamples.ExampleClass.Add*:
    name:
      CSharp:
      - id: AbatabLogging.CommentExamples.ExampleClass.Add*
        name: Add
        nameWithType: CommentExamples.ExampleClass.Add
        qualifiedName: AbatabLogging.CommentExamples.ExampleClass.Add
      VB:
      - id: AbatabLogging.CommentExamples.ExampleClass.Add*
        name: Add
        nameWithType: CommentExamples.ExampleClass.Add
        qualifiedName: AbatabLogging.CommentExamples.ExampleClass.Add
    isDefinition: true
    commentId: Overload:AbatabLogging.CommentExamples.ExampleClass.Add
  AbatabLogging.CommentExamples.ExampleClass.gsgsg*:
    name:
      CSharp:
      - id: AbatabLogging.CommentExamples.ExampleClass.gsgsg*
        name: gsgsg
        nameWithType: CommentExamples.ExampleClass.gsgsg
        qualifiedName: AbatabLogging.CommentExamples.ExampleClass.gsgsg
      VB:
      - id: AbatabLogging.CommentExamples.ExampleClass.gsgsg*
        name: gsgsg
        nameWithType: CommentExamples.ExampleClass.gsgsg
        qualifiedName: AbatabLogging.CommentExamples.ExampleClass.gsgsg
    isDefinition: true
    commentId: Overload:AbatabLogging.CommentExamples.ExampleClass.gsgsg
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  AbatabLogging.Debuggler.DebugTheDebugger*:
    name:
      CSharp:
      - id: AbatabLogging.Debuggler.DebugTheDebugger*
        name: DebugTheDebugger
        nameWithType: Debuggler.DebugTheDebugger
        qualifiedName: AbatabLogging.Debuggler.DebugTheDebugger
      VB:
      - id: AbatabLogging.Debuggler.DebugTheDebugger*
        name: DebugTheDebugger
        nameWithType: Debuggler.DebugTheDebugger
        qualifiedName: AbatabLogging.Debuggler.DebugTheDebugger
    isDefinition: true
    commentId: Overload:AbatabLogging.Debuggler.DebugTheDebugger
  AbatabLogging.Debuggler:
    name:
      CSharp:
      - id: AbatabLogging.Debuggler
        name: Debuggler
        nameWithType: Debuggler
        qualifiedName: AbatabLogging.Debuggler
      VB:
      - id: AbatabLogging.Debuggler
        name: Debuggler
        nameWithType: Debuggler
        qualifiedName: AbatabLogging.Debuggler
    isDefinition: true
    commentId: T:AbatabLogging.Debuggler
  AbatabLogging.LogEvent.Access*:
    name:
      CSharp:
      - id: AbatabLogging.LogEvent.Access*
        name: Access
        nameWithType: LogEvent.Access
        qualifiedName: AbatabLogging.LogEvent.Access
      VB:
      - id: AbatabLogging.LogEvent.Access*
        name: Access
        nameWithType: LogEvent.Access
        qualifiedName: AbatabLogging.LogEvent.Access
    isDefinition: true
    commentId: Overload:AbatabLogging.LogEvent.Access
  AbatabLogging.LogEvent.Debug*:
    name:
      CSharp:
      - id: AbatabLogging.LogEvent.Debug*
        name: Debug
        nameWithType: LogEvent.Debug
        qualifiedName: AbatabLogging.LogEvent.Debug
      VB:
      - id: AbatabLogging.LogEvent.Debug*
        name: Debug
        nameWithType: LogEvent.Debug
        qualifiedName: AbatabLogging.LogEvent.Debug
    isDefinition: true
    commentId: Overload:AbatabLogging.LogEvent.Debug
  AbatabLogging.LogEvent.ModQuickMedOrder*:
    name:
      CSharp:
      - id: AbatabLogging.LogEvent.ModQuickMedOrder*
        name: ModQuickMedOrder
        nameWithType: LogEvent.ModQuickMedOrder
        qualifiedName: AbatabLogging.LogEvent.ModQuickMedOrder
      VB:
      - id: AbatabLogging.LogEvent.ModQuickMedOrder*
        name: ModQuickMedOrder
        nameWithType: LogEvent.ModQuickMedOrder
        qualifiedName: AbatabLogging.LogEvent.ModQuickMedOrder
    isDefinition: true
    commentId: Overload:AbatabLogging.LogEvent.ModQuickMedOrder
  AbatabLogging.LogEvent.PrimevalDebug*:
    name:
      CSharp:
      - id: AbatabLogging.LogEvent.PrimevalDebug*
        name: PrimevalDebug
        nameWithType: LogEvent.PrimevalDebug
        qualifiedName: AbatabLogging.LogEvent.PrimevalDebug
      VB:
      - id: AbatabLogging.LogEvent.PrimevalDebug*
        name: PrimevalDebug
        nameWithType: LogEvent.PrimevalDebug
        qualifiedName: AbatabLogging.LogEvent.PrimevalDebug
    isDefinition: true
    commentId: Overload:AbatabLogging.LogEvent.PrimevalDebug
  AbatabLogging.LogEvent.Session*:
    name:
      CSharp:
      - id: AbatabLogging.LogEvent.Session*
        name: Session
        nameWithType: LogEvent.Session
        qualifiedName: AbatabLogging.LogEvent.Session
      VB:
      - id: AbatabLogging.LogEvent.Session*
        name: Session
        nameWithType: LogEvent.Session
        qualifiedName: AbatabLogging.LogEvent.Session
    isDefinition: true
    commentId: Overload:AbatabLogging.LogEvent.Session
  AbatabLogging.LogEvent.Trace*:
    name:
      CSharp:
      - id: AbatabLogging.LogEvent.Trace*
        name: Trace
        nameWithType: LogEvent.Trace
        qualifiedName: AbatabLogging.LogEvent.Trace
      VB:
      - id: AbatabLogging.LogEvent.Trace*
        name: Trace
        nameWithType: LogEvent.Trace
        qualifiedName: AbatabLogging.LogEvent.Trace
    isDefinition: true
    commentId: Overload:AbatabLogging.LogEvent.Trace
  System.Collections.Generic.Dictionary`2:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.Dictionary`2
  System.Collections.Generic:
    name:
      CSharp:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
        isExternal: true
      VB:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
    isDefinition: true
    commentId: N:System.Collections.Generic
  System.Collections.Generic.Dictionary{System.String,System.String}:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.Dictionary{System.String,System.String}
  AbatabLogging.LogEvent.WebConfigDebug*:
    name:
      CSharp:
      - id: AbatabLogging.LogEvent.WebConfigDebug*
        name: WebConfigDebug
        nameWithType: LogEvent.WebConfigDebug
        qualifiedName: AbatabLogging.LogEvent.WebConfigDebug
      VB:
      - id: AbatabLogging.LogEvent.WebConfigDebug*
        name: WebConfigDebug
        nameWithType: LogEvent.WebConfigDebug
        qualifiedName: AbatabLogging.LogEvent.WebConfigDebug
    isDefinition: true
    commentId: Overload:AbatabLogging.LogEvent.WebConfigDebug
  AbatabLogging.LogEvent:
    name:
      CSharp:
      - id: AbatabLogging.LogEvent
        name: LogEvent
        nameWithType: LogEvent
        qualifiedName: AbatabLogging.LogEvent
      VB:
      - id: AbatabLogging.LogEvent
        name: LogEvent
        nameWithType: LogEvent
        qualifiedName: AbatabLogging.LogEvent
    isDefinition: true
    commentId: T:AbatabLogging.LogEvent
  AbatabLogging.WriteLogFile.LocalFile*:
    name:
      CSharp:
      - id: AbatabLogging.WriteLogFile.LocalFile*
        name: LocalFile
        nameWithType: WriteLogFile.LocalFile
        qualifiedName: AbatabLogging.WriteLogFile.LocalFile
      VB:
      - id: AbatabLogging.WriteLogFile.LocalFile*
        name: LocalFile
        nameWithType: WriteLogFile.LocalFile
        qualifiedName: AbatabLogging.WriteLogFile.LocalFile
    isDefinition: true
    commentId: Overload:AbatabLogging.WriteLogFile.LocalFile
  AbatabLogging.WriteLogFile:
    name:
      CSharp:
      - id: AbatabLogging.WriteLogFile
        name: WriteLogFile
        nameWithType: WriteLogFile
        qualifiedName: AbatabLogging.WriteLogFile
      VB:
      - id: AbatabLogging.WriteLogFile
        name: WriteLogFile
        nameWithType: WriteLogFile
        qualifiedName: AbatabLogging.WriteLogFile
    isDefinition: true
    commentId: T:AbatabLogging.WriteLogFile
  AbatabLogging:
    name:
      CSharp:
      - name: AbatabLogging
        nameWithType: AbatabLogging
        qualifiedName: AbatabLogging
      VB:
      - name: AbatabLogging
        nameWithType: AbatabLogging
        qualifiedName: AbatabLogging
    isDefinition: true
    commentId: N:AbatabLogging
