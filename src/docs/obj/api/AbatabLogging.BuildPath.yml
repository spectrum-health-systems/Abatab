### YamlMime:ManagedReference
items:
- uid: AbatabLogging.BuildPath
  commentId: T:AbatabLogging.BuildPath
  id: BuildPath
  parent: AbatabLogging
  children:
  - AbatabLogging.BuildPath.MessageName(System.String,System.String,System.String)
  - AbatabLogging.BuildPath.Timestamped(System.String,System.String)
  - AbatabLogging.BuildPath.WithCaller(System.String,System.String,System.String,System.String,System.String,System.Int32)
  langs:
  - csharp
  - vb
  name: BuildPath
  nameWithType: BuildPath
  fullName: AbatabLogging.BuildPath
  type: Class
  source:
    id: BuildPath
    path: C:\IT\GitHub\SHS\Abatab\src\Core\AbatabLogging\BuildPath.cs
    startLine: 25
  assemblies:
  - AbatabLogging
  namespace: AbatabLogging
  summary: "\nLogic for building log file paths.\n"
  example: []
  syntax:
    content: public static class BuildPath
    content.vb: Public Module BuildPath
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: AbatabLogging.BuildPath.WithCaller(System.String,System.String,System.String,System.String,System.String,System.Int32)
  commentId: M:AbatabLogging.BuildPath.WithCaller(System.String,System.String,System.String,System.String,System.String,System.Int32)
  id: WithCaller(System.String,System.String,System.String,System.String,System.String,System.Int32)
  parent: AbatabLogging.BuildPath
  langs:
  - csharp
  - vb
  name: WithCaller(String, String, String, String, String, Int32)
  nameWithType: BuildPath.WithCaller(String, String, String, String, String, Int32)
  fullName: AbatabLogging.BuildPath.WithCaller(System.String, System.String, System.String, System.String, System.String, System.Int32)
  type: Method
  source:
    id: WithCaller
    path: C:\IT\GitHub\SHS\Abatab\src\Core\AbatabLogging\BuildPath.cs
    startLine: 37
  assemblies:
  - AbatabLogging
  namespace: AbatabLogging
  summary: "\nBuilds a log file path with caller information.\n"
  example: []
  syntax:
    content: public static string WithCaller(string eventType, string logRoot, string exeAssembly = "", string callPath = "", string callMember = "", int callLine = 0)
    parameters:
    - id: eventType
      type: System.String
      description: The type of log to create.
    - id: logRoot
      type: System.String
      description: The session root directory.
    - id: exeAssembly
      type: System.String
      description: The name of executing assembly.
    - id: callPath
      type: System.String
      description: The filename of where the log is coming from.
    - id: callMember
      type: System.String
      description: The method name of where the log is coming from.
    - id: callLine
      type: System.Int32
      description: The file line of where the log is coming from.
    return:
      type: System.String
      description: A completed log file path with caller information.
    content.vb: Public Shared Function WithCaller(eventType As String, logRoot As String, exeAssembly As String = "", callPath As String = "", callMember As String = "", callLine As Integer = 0) As String
  overload: AbatabLogging.BuildPath.WithCaller*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AbatabLogging.BuildPath.Timestamped(System.String,System.String)
  commentId: M:AbatabLogging.BuildPath.Timestamped(System.String,System.String)
  id: Timestamped(System.String,System.String)
  parent: AbatabLogging.BuildPath
  langs:
  - csharp
  - vb
  name: Timestamped(String, String)
  nameWithType: BuildPath.Timestamped(String, String)
  fullName: AbatabLogging.BuildPath.Timestamped(System.String, System.String)
  type: Method
  source:
    id: Timestamped
    path: C:\IT\GitHub\SHS\Abatab\src\Core\AbatabLogging\BuildPath.cs
    startLine: 65
  assemblies:
  - AbatabLogging
  namespace: AbatabLogging
  summary: "\nBuilds a timestamped log file path.\n"
  example: []
  syntax:
    content: public static string Timestamped(string eventType, string logRoot)
    parameters:
    - id: eventType
      type: System.String
      description: The type of log to create.
    - id: logRoot
      type: System.String
      description: The session root directory.
    return:
      type: System.String
      description: A completed log file path with a timestamp.
    content.vb: Public Shared Function Timestamped(eventType As String, logRoot As String) As String
  overload: AbatabLogging.BuildPath.Timestamped*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AbatabLogging.BuildPath.MessageName(System.String,System.String,System.String)
  commentId: M:AbatabLogging.BuildPath.MessageName(System.String,System.String,System.String)
  id: MessageName(System.String,System.String,System.String)
  parent: AbatabLogging.BuildPath
  langs:
  - csharp
  - vb
  name: MessageName(String, String, String)
  nameWithType: BuildPath.MessageName(String, String, String)
  fullName: AbatabLogging.BuildPath.MessageName(System.String, System.String, System.String)
  type: Method
  source:
    id: MessageName
    path: C:\IT\GitHub\SHS\Abatab\src\Core\AbatabLogging\BuildPath.cs
    startLine: 99
  assemblies:
  - AbatabLogging
  namespace: AbatabLogging
  summary: "\nBuilds a log file path with the log message in the name.\n"
  example: []
  syntax:
    content: public static string MessageName(string eventType, string logRoot, string logMsg)
    parameters:
    - id: eventType
      type: System.String
      description: The type of log to create.
    - id: logRoot
      type: System.String
      description: The session root directory.
    - id: logMsg
      type: System.String
      description: The log message.
    return:
      type: System.String
      description: A log file path with the log message in the name.
    content.vb: Public Shared Function MessageName(eventType As String, logRoot As String, logMsg As String) As String
  overload: AbatabLogging.BuildPath.MessageName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: AbatabLogging
  commentId: N:AbatabLogging
  name: AbatabLogging
  nameWithType: AbatabLogging
  fullName: AbatabLogging
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: AbatabLogging.BuildPath.WithCaller*
  commentId: Overload:AbatabLogging.BuildPath.WithCaller
  name: WithCaller
  nameWithType: BuildPath.WithCaller
  fullName: AbatabLogging.BuildPath.WithCaller
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: AbatabLogging.BuildPath.Timestamped*
  commentId: Overload:AbatabLogging.BuildPath.Timestamped
  name: Timestamped
  nameWithType: BuildPath.Timestamped
  fullName: AbatabLogging.BuildPath.Timestamped
- uid: AbatabLogging.BuildPath.MessageName*
  commentId: Overload:AbatabLogging.BuildPath.MessageName
  name: MessageName
  nameWithType: BuildPath.MessageName
  fullName: AbatabLogging.BuildPath.MessageName
